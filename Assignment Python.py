# -*- coding: utf-8 -*-
"""Un.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12x5SnlYSuPU_mf5fXaMrj7XdRQ7k5Nq4
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Define the file path
file_path = "/content/drive/My Drive/Python Assignment/Advertising_Budget_and_Sales[1].csv"

# Load the dataset
df = pd.read_csv(file_path)

# Display the first few rows
print(df.head())

!pip install streamlit

import streamlit as st
print("Streamlit installed successfully!")

!streamlit run your_script.py & npx localtunnel --port 8501

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# 
# st.title("Hello, Streamlit!")
# st.write("This is a simple Streamlit app running from Google Colab.")
#

!streamlit run app.py & npx localtunnel --port 8501

# Check for missing values and basic info
df.info()
df.isnull().sum()

# Drop any missing values or handle them as necessary
df.dropna(inplace=True)

# If you want to use specific columns for the regression, for example, "TV", "Radio", "Newspaper" as features and "Sales" as the target:
X = df[['TV Ad Budget ($)', 'Radio Ad Budget ($)', 'Newspaper Ad Budget ($)']]  # Independent variables (features)
y = df['Sales ($)']  # Dependent variable (target)

# Splitting the data into training and test sets
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Initialize the linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R2 Score: {r2}')

from google.colab import drive
drive.mount('/content/drive')

data_path = '/content/drive/MyDrive/Advertising_Budget_and_Sales[1].csv'

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Title of the app
st.title("Advertising Budget and Sales Prediction")

# Load the dataset from Google Drive
data_path = '/content/drive/MyDrive/Advertising_Budget_and_Sales[1].csv'
df = pd.read_csv(data_path)

# Display the dataset
st.write("Dataset Preview", df.head())

# Check if the dataset contains the expected columns
if 'TV Ad Budget ($)' not in df.columns or 'Radio Ad Budget ($)' not in df.columns or 'Newspaper Ad Budget ($)' not in df.columns or 'Sales' not in df.columns:
    st.error("Dataset doesn't have the expected columns!")
else:
    # Input section for selecting features and target
    features = st.multiselect('Select Features', ['TV Ad Budget ($)', 'Radio Ad Budget ($)', 'Newspaper Ad Budget ($)'])
    target = 'Sales'

    if len(features) == 0:
        st.error("Please select at least one feature!")
    else:
        # Prepare the data
        X = df[features]
        y = df[target]

        # Check if the data is empty
        if X.empty or y.empty:
            st.error("The selected data is empty!")
        else:
            # Train-test split
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            # Ensure that the train and test splits have data
            if X_train.empty or X_test.empty or y_train.empty or y_test.empty:
                st.error("Training or test data is empty!")
            else:
                # Train the model
                model = LinearRegression()
                model.fit(X_train, y_train)

                # Prediction
                y_pred = model.predict(X_test)

                # Evaluation
                mse = mean_squared_error(y_test, y_pred)
                r2 = r2_score(y_test, y_pred)

                # Display results
                st.write(f'Mean Squared Error: {mse}')
                st.write(f'R2 Score: {r2}')

                # Plotting the results
                fig, ax = plt.subplots()
                ax.scatter(y_test, y_pred)
                ax.plot([y.min(), y.max()], [y.min(), y.max()], '--k', color='red')
                ax.set_xlabel('True values')
                ax.set_ylabel('Predicted values')
                ax.set_title('True vs Predicted Sales')
                st.pyplot(fig)

!streamlit run app.py

pip install scikit-learn